{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","paste","evt","this","setState","target","value","lines","_","split","trim","console","log","map","l","i","dollars","numeral","replace","cents","str","writtenNumber","noAnd","join","s","toUpperCase","slice","key","className","rows","cols","wrap","onChange","pasteChanged","style","margin","padding","display","flexDirection","backgroundColor","color","textAlign","fontFamily","fontSize","renderAmounts","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTAmDeA,E,kDA5Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,MAAO,IAFV,E,yDAKDC,GACXC,KAAKC,SAAS,CAAEH,MAAOC,EAAIG,OAAOC,U,sCAIlC,IAAMC,EAAQC,IAAEC,MAAMN,KAAKH,MAAMC,MAAMS,OAAO,MAE9C,OADAC,QAAQC,IAAI,WAAYL,GACjBC,IAAEK,IAAIN,GAAO,SAACO,EAAEC,GACrB,IAAMC,EAAUC,IAAQH,EAAEJ,OAAOQ,QAAQ,YAAY,KAAKZ,QACpDa,EAAQL,EAAEJ,OAAOQ,QAAQ,iBAAiB,MAE5CE,EAAMC,IAAcL,EAAS,CAAEM,OAAO,IAO1C,OANAF,EAAMZ,IAAEe,KACNf,IAAEK,IAAIO,EAAIX,MAAM,MAAM,SAAAe,GAAC,OAAIA,EAAEC,cAAc,GAAKD,EAAEE,MAAM,MACxD,KAEFN,GAAO,gBAAkBD,EAAQ,SACjCR,QAAQC,IAAI,mBAAoBQ,GACzB,yBAAKO,IAAG,gBAAWZ,IAAMK,Q,+BAI1B,IAAD,OACP,OACE,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAAlB,0CAEE,8BAAUC,KAAK,KAAKC,KAAK,KAAKC,KAAK,OACzBC,SAAU,SAAA9B,GAAG,OAAI,EAAK+B,aAAa/B,IACnCI,MAAOH,KAAKH,MAAMC,QAC9B,yBAAKiC,MAAO,CAACC,OAAQ,OAAQC,QAAS,OAAQC,QAAS,OAAQC,cAAe,SAAUC,gBAAiB,UAAWC,MAAO,UAAWC,UAAW,OAAQC,WAAY,UAAWC,SAAU,SACvLxC,KAAKyC,uB,GArCEC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.2f18006e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport _ from 'lodash';\nimport numeral from 'numeral';\nimport writtenNumber from 'written-number';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { paste: '' }\n  }\n\n  pasteChanged(evt) {\n    this.setState({ paste: evt.target.value});\n  }\n\n  renderAmounts() {\n    const lines = _.split(this.state.paste.trim(),'\\n');\n    console.log('lines = ', lines);\n    return _.map(lines, (l,i) => {\n      const dollars = numeral(l.trim().replace(/\\.[0-9]*$/,'')).value();\n      const cents = l.trim().replace(/^.*\\.([0-9]*)$/,'$1');\n  \n      let str = writtenNumber(dollars, { noAnd: true });\n      str = _.join(\n        _.map(str.split(' '), s => s.toUpperCase()[0] + s.slice(1)),\n        ' '\n      );\n      str += ' Dollars and ' + cents + ' Cents';\n      console.log('returning str = ', str);\n      return <div key={`amount${i}`}>{str}</div>\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Paste check amounts below, one per line\n          <textarea rows=\"20\" cols=\"80\" wrap=\"hard\" \n                    onChange={evt => this.pasteChanged(evt)}\n                    value={this.state.paste} />\n        <div style={{margin: '10px', padding: '10px', display: 'flex', flexDirection: 'column', backgroundColor: '#FFFFFF', color: '#000000', textAlign: 'left', fontFamily: 'courier', fontSize: '14px'}}>\n          {this.renderAmounts()}\n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}